Simple made Difficult
6 Sep 2018
Tags: go golang design philosophy

Jason Moiron
Staff Engineer for metrics stuff
@jason on slack
@jmoiron everwhere else

* Some Quotes

: I like to start off with quotes, because I want to set the tone that nothing in my talks is original and I've stolen most everything.

"[..] Everything simple is made too complicated because it's easy to fiddle with;
everything complicated stays complicated because it's hard to fix."

.caption Rob Pike

"Je n’ai fait celle-ci plus longue que parce que je n’ai pas eu le loisir de la faire plus courte."

.caption Blaise Pascal

: It's difficult to make simple things, but it's worth it.

: A lot of our backend here at Datadog is written in Go.  This means a lot of us here program in it daily, but some of us use it only rarely and still others begrudgingly.  I wanted to do a little history lesson in the design and the philosophy behind Go and its creators, and then briefly do some performance stuff and talk about how aiming for simplicity and transparency can lead us to writing better programs that run faster.

* The origins of Go

The main goal was to enable programmers at Google to write the type of software commonly written at Google by the types of people at Google.

- networked services
- lots of parallelism
- scalability
- static types (for "programming in the large")
- usable by programmers of varying degrees of experience

We (datadog) shared nearly all of these goals, with one extra one, being finding a way out of performance traps in Python.

: Modern OO was hard to read (spaghetti code) and cluttered with syntax (Public Static Void)
: Large programs in dynamic languages are hard to read because it lacks type information for human readers

* Design Philosophy

- *simplicity*
- safety (memory)
- readability
- orthogonality (TOOWTDI)

: simplicity is a loaded term, but they wanted to avoid the complexity of c++/java
: they wanted memory safety (c++ again)
: readability is self explanatory
: orthogonality;  there should not be a lot of overlapping features of the language, it's a sign things are not simple enough
: You can sum a lot of this up as "pragmatic minimalism"

But still modern:

- modules/packages
- closures
- interfaces
- multiprocessing

* Simple?

.image keywords.png _ 800

* Simplifications over C++

.image golack.png _ 800

.caption Rob Pike, [[https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html][Less is Exponentially More]]

* Making Decisions

When making a decision, we:

- figure out your goal or goals
- evaluate its importance
- enumarate your options
- evaluate how likely each option will meet your goals
- pick the winning option
- modify your goals

.caption Barry Schwartz, "The Paradox of Choice"

: Making decisions has higher overhead cost than we think.
: How hard is it to name a package?
: How many times have you just been parylized as a group trying to decide
: where to go for lunch?

: I've had project ideas die on the vine because I coudln't come up with
: a good name for them.

: This can often get called analysis paralysis.  Embrace any opportunity
: to not make a decision.

: Those decisions don't even matter (well, i like fun names)

* Making Decisions II

Go makes a lot of decisions for you:

- how to name your files and directories
- how packages are laid out on disk
- how to build your code
- the formatting style of your code (if you use gofmt)
- your documentation style (if you use golint)

: Time has shown these dont matter:
: - There are zero style discussions in the Go community,
: - Consistent formatting is very widespread. (all code looks the same!)
: - There are virtually no alternative build tools, either (they all use go build as a driver)
: ant, maven, gradle;  smart people actually spend their time on this
: they could be writing other java software
: different systems are healthy for the overall ecosystem, but that ecosystem
: is software development;  we don't need or want heterogeneity within
: a single language, or worse, a single company

* Making decisions III

use gofmt and golint

.image youmust.png _ 600

* Making Decisions IV

Datadog makes a lot of decisions for you:

- repo layout
- deployment/infra tools
- rpc protocol
- configuration
- test harness/runner
- deployment
- what language(s) to use

: there isn't an objectively best answer for this, same as the
: previous page, but it is objectively better for us all to be
: on the same page than to diverge.

: of course, datadog is us, and we are free to change our minds
: from time to time, but the important thing is to come up with
: a set of compromises that meets our goals and then stick to
: the plan.

* Making Decisions: Exciting conclusion

If you're writing a library:

- stick to as many conventions as possible
- make decisions on your users behalf

: How do you learn conventions?
: Read code.  Read the stdlib.  Pick a module in dd-go and read it.  It may be
: great or it may be crap.  Share code you think is a good read or well
: documented in #go

* Simplicity in the small

: I know what you're thinking, stop pontificating about simplicity.
: I exist on a higher plane of reality, my middle name is monad, I am
: eating endofunctors for breakfast.

: I'm going to get started on how simplicity manifests itself in programming and
: then why it has good survival characteristics on large projects and, most 
: relevnant to us because we are real pragmatic grownups, good runtime 
: characteristics as well

Rob Pike's rules of programming (abridged):

1. You can't tell where a program is going to spend its time.  Bottlenecks occur in surprising places.
2. Measure.  Don't tune for speed until you've measured.
3. Fancy algorithms are slow when n is small, and n is usually small
4. Fancy algorithms are buggier than simple ones, and harder to implement.  Use simple algorithms and simple data structures.
5. Data dominates.  If you've chosen the right data structures, the algorithms will almost always be self-evident.

.caption Rob Pike [[https://www.lysator.liu.se/c/pikestyle.html][Notes on programming in C]]

* How is this relevant?

Simple things tend to be _fast_

- they are easy to understand
- understanding provides transparency
- transparency lets you use apply abstractions while maintaining efficiency
- upstream, the focus is on improving perf for "normal" code

: this builds in a big tower;  if, at the lowest layer, your abstractions are doing
: things that are inefficient, then you will not be able to build efficient programs
: on top of them.

: these are the "performance traps" that I mentioned, that I'm going to briefly
: touch on now

: simple things are also easier to learn, and learning begets learning.

* Comparing Simple Things

.code foo.py

This is pretty simple looking code.

.caption From the excellent [[https://amir.rachum.com/blog/2016/10/03/understanding-python-class-instantiation/][Understanding Python Class Instantiation]]

* Comparing Simple Things: Python

What does Foo(1, 2) do? 

- Method invocation triggers `Foo.__call__` 
- Foo is type *type*, so we get `type.__call__`(Foo, ..)
- The method `type.__call__`(Foo, ..) calls `type.__new__`(Foo, ..) to allocate new Foo f
- f is initialized by calling `f.__init__`(*args, **kwargs)
- f is then returned

* Comparing Simple Things: Python

For CPython, `type.__call__` is implemented in C:

.image typeobj.png 400 _

.caption [[https://github.com/python/cpython/blob/master/Objects/typeobject.c#L911][typeobject.c]]

* Comparing Simple Things: Go

.code foo.go

* Comparing Simple Things: Go (Impl)

Run `go tool compile -S` to see the asm implementation:

	0x0000 00000 (foo.go:6)	TEXT	"".stuff(SB), NOSPLIT, $0-16
	0x0000 00000 (foo.go:6)	FUNCDATA	$0, gclocals·f207267fbf96a0178e8758c6e3e0ce28(SB)
	0x0000 00000 (foo.go:6)	FUNCDATA	$1, gclocals·33cdeccccebe80329f1fdbee7f5874cb(SB)
	0x0000 00000 (foo.go:8)	MOVQ	$1, "".~r0+8(SP)
	0x0009 00009 (foo.go:8)	MOVQ	$2, "".~r0+16(SP)
	0x0012 00018 (foo.go:8)	RET

* Comparing Simple Things: Go (Maps)

What if we wrote it like this instead:

    f := map[string]int{"x": 1, "y": 2}

We didn't need to declare a type, it's simpler right?

* Comparing Simple Things: Go (Maps II)

.image smvasm.png _ 750

: this is one of the simpler speed traps in python

* Simple made Difficult:

   for x in xs:
       x.y()

What does this do?

: x.y() is actually complicated;  python has to follow a number of
: possible attribute override protocols it has to determine what the
: name y refers to, and as we saw before calling y can also involve
: multi-level lookup

: xs can override iter, executing arbitrary code every loop
: classic example, xs is a lazy loaded result set from sql, and y
: does some kind of join, meaning this simple does 2*len(xs) db calls 

: If you use Go, do you know how goroutines work?
: Do you know how the Go stack works?  Sometimes details are important,
: other times they aren't.

* Simplicity in the Large

- well-defined interfaces all the way down
- close to the platform border as often as possible (shallow stacks)
- abstractions make sense in isolation
- specializers are usually too complex to get reused
- context is king

Assume nobody will want to reuse your code.

But write it like they will.

: odds are even you won't reuse your own code

: the second one means they make sense outside the context they were written in;
: if you write a "cache" type, then it's either strictly typed to the cache you
: needed it for, or it is more reusalbe but doesn't have a bunch of weird stuff
: you need

: and don't write a complex cache that is pluggable with the weird behaviour you
: need, because that is not real reusability that is just complexity

: context is everything; `dd-go/cache/lru` has to live up to general usage constraints
: and a level of obviousness that `dd-go/apps/foo/ejectinglru` or internal packages don't.

* The wool over our eyes

Real programs may be simple, but they run on complex systems:

- impact of the scheduler
- cpu cache utilization
- impact of branch prediction (lol)
- cost of allocation
- interaction between your program and the OS
- behavior of dependent networked systems (eg. dbs)
- properties of _actual_ workload as it evolves
- garbage collection

: These don't make a big difference in short run programs, but they can dominate daemons

: Note that individually, successful versions of these programs tend to be simple
: or transparent;  not neither.  The interaction of these systems is complex,
: that's why Datadog exists.

* In Summary

- with Go, simplicity is a foundational goal
- write opaque abstractions that are transparent about implementation
- be deliberate up front about performance
- but measure often anyway;  don't guess
- "normal" code is better in the long run

: Knowing how things work isn't prematurely optimizing, it's about understanding
your problem domain and applying your experience to not write code that does
dumb things accidentally.

: Even still, measure often, don't guess.

: Go is a moving target, "normal" code will get faster, your smart way to trick
the inliner might stop working.


